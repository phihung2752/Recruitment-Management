import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('üî• API: Analyzing CV with AI...', { candidateName: body.candidateName })

    // Call backend AI analysis API
    const backendUrl = process.env.BACKEND_URL || 'http://localhost:5000'
    const response = await fetch(`${backendUrl}/api/ai-cv/analyze`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ API: AI analysis completed successfully')
      return NextResponse.json(data)
    } else {
      console.log('‚ùå Backend not available, using mock analysis')
      
      // Mock AI analysis result
      const mockAnalysis = {
        overallScore: Math.floor(Math.random() * 30) + 70, // 70-100
        skillsMatch: Math.floor(Math.random() * 30) + 70,
        experienceMatch: Math.floor(Math.random() * 30) + 70,
        educationMatch: Math.floor(Math.random() * 30) + 70,
        recommendedLabels: ["Senior", "React Expert", "Team Lead"],
        strengths: [
          "5+ nƒÉm kinh nghi·ªám React",
          "C√≥ kinh nghi·ªám qu·∫£n l√Ω team",
          "Th√†nh th·∫°o TypeScript",
          "C√≥ kinh nghi·ªám v·ªõi testing"
        ],
        weaknesses: [
          "Thi·∫øu kinh nghi·ªám v·ªõi Node.js",
          "Ch∆∞a c√≥ kinh nghi·ªám v·ªõi AWS"
        ],
        recommendation: "Strong Match",
        interviewQuestions: [
          "B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªÅ d·ª± √°n React ph·ª©c t·∫°p nh·∫•t m√† b·∫°n ƒë√£ l√†m?",
          "L√†m th·∫ø n√†o b·∫°n qu·∫£n l√Ω team trong d·ª± √°n tr∆∞·ªõc ƒë√¢y?",
          "B·∫°n c√≥ kinh nghi·ªám g√¨ v·ªõi testing trong React?",
          "B·∫°n c√≥ kinh nghi·ªám g√¨ v·ªõi performance optimization?",
          "B·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch v·ªÅ state management trong React?"
        ],
        suggestedSalary: "25-35 tri·ªáu VND",
        priority: "High"
      }

      return NextResponse.json(mockAnalysis)
    }
  } catch (error) {
    console.error('‚ùå API Error:', error)
    return NextResponse.json(
      { error: 'Failed to analyze CV' },
      { status: 500 }
    )
  }
}




















